{"version":3,"sources":["components/header/Header.js","components/footer/Footer.js","components/film-details/FilmDetails.js","components/image-result/ImageResults.js","components/search/Search.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","AppBar_default","title","style","postion","top","Footer","position","bottom","iconElementRight","cloud_download_default","color","yellow500","FilmDetails","selectedFilm","this","props","imageSource","show","image","medium","Card","score","subtitle","status","avatar","overlay","name","language","src","alt","premiered","summary","FlatButton_default","label","Component","ImageResults","state","seleted","_this","choosen","choosenFilm","handleClick","img","setState","imageListContent","_this2","images","GridList","cols","map","key","id","type","actionIcon","IconButton_default","onClick","zoom_in_default","film_details_FilmDetails","React","propType","array","isRequired","Search","searchText","apiUrl","onTextChange","e","val","target","value","Object","defineProperty","axios","get","concat","then","res","data","catch","err","console","log","onAmountChange","index","amout","TextField_default","onChange","floatingLabelText","fullWidth","textareaStyle","alignItems","length","image_result_ImageResults","App","MuiThemeProvider_default","header_Header","search_Search","footer_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.081a46b6.chunk.js","sourcesContent":["import React from 'react';\nimport AppBar from 'material-ui/AppBar';\n\nconst Header = () => <AppBar title = \"The NO.1 Film Search Engine\" style={{postion:'fixd', top:0}}/>;\n\nexport default Header;\n","import React, { Component } from 'react';\nimport ActionHome from 'material-ui/svg-icons/action/home';\nimport FileCloudDownload from 'material-ui/svg-icons/file/cloud-download';\nimport {yellow500} from 'material-ui/styles/colors';\n\nimport AppBar from 'material-ui/AppBar';\n\nconst Footer = () => <AppBar title = \"Film Finder\"\n                             style={{position:'fixed',bottom:0}}\n                             iconElementRight={<FileCloudDownload color={yellow500} />}\n                         />;\nexport default Footer;\n","import React , { Component }from 'react';\nimport {Card, CardActions, CardHeader, CardMedia, CardTitle, CardText} from 'material-ui/Card';\nimport FlatButton from 'material-ui/FlatButton';\n\nclass FilmDetails extends Component {\n    render() {\n        const {selectedFilm} = this.props;\n        var imageSource = 'https://static.addtoany.com/images/dracaena-cinnabari.jpg';\n        if (selectedFilm.show.image && selectedFilm.show.image.medium)\n            imageSource = selectedFilm.show.image.medium;\n    //    const imageSource = ({selectedFilm.show.image} && {selectedFilm.show.image.original})? {selectedFilm.show.image.original} : 'https://static.addtoany.com/images/dracaena-cinnabari.jpg';\n      return (\n  <Card>\n    <CardHeader\n      title={selectedFilm.score}\n      subtitle={selectedFilm.show.status}\n      avatar=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/34/Red_star.svg/2000px-Red_star.svg.png\"\n    />\n    <CardMedia\n      overlay={<CardTitle title={selectedFilm.show.name} subtitle={selectedFilm.show.language} />}\n    >\n     <img src={imageSource} alt=\"\" />\n    </CardMedia>\n    <CardTitle title={selectedFilm.show.name.premiered} subtitle=\"summary\" />\n    <CardText>\n    <div>\n    {selectedFilm.show.summary}\n    </div>\n    </CardText>\n    <CardActions>\n      <FlatButton label=\"Action1\" />\n      <FlatButton label=\"Action2\" />\n    </CardActions>\n  </Card>\n);\n}\n}\n\nexport default FilmDetails;\n","import React from 'react';\nimport propType from 'prop-types';\nimport { GridList, GridTile} from 'material-ui/GridList';\nimport IconButton from 'material-ui/IconButton';\nimport ZoomIn from 'material-ui/svg-icons/action/zoom-in';\nimport FilmDetails from '../film-details/FilmDetails';\n\nclass ImageResults extends React.Component {\n    state = {\n        seleted: this.props.choosen,\n        choosenFilm:[],\n    }\n\n    handleClick = img => {\n        this.setState({ seleted: true, choosenFilm: img });\n    }\n\n    render() {\n        let imageListContent;\n        const {images} = this.props;\n\n        if (images) {\n            imageListContent = (\n                <GridList cols={6}>\n                    {images.map(img => (\n                        <GridTile\n                            title = {img.show.name}\n                            key = {img.show.id}\n                            subtitle={\n                                <span>\n                                    type <strong>{img.show.type}</strong>\n                                </span>\n                            }\n                            actionIcon = {\n                            <IconButton onClick={() => this.handleClick(img)} >\n                                    <ZoomIn color=\"white\" />\n                                </IconButton>\n                            }\n                            >\n                        <img src={(img.show.image && img.show.image.medium)? img.show.image.medium : 'https://static.addtoany.com/images/dracaena-cinnabari.jpg'} alt=\"\" />\n                        </GridTile>\n                    ))}\n                </GridList>\n            )\n        } else {\n            imageListContent = null;\n        }\n\n        if (!this.state.seleted)\n        {\n            return (\n                <div>\n                 {imageListContent}\n                </div>\n            )\n    } else {\n        return ( <div><FilmDetails selectedFilm={this.state.choosenFilm} /> </div>)\n    }\n}\n\n}\n\n\nImageResults.propType = {\n    images: propType.array.isRequired\n}\n\nexport default ImageResults;\n","import React , { Component }from 'react';\nimport TextField from 'material-ui/TextField';\nimport axios from 'axios';\nimport ImageResults from '../image-result/ImageResults';\n\nclass Search extends Component {\n    state = {\n        searchText: '',\n        apiUrl: 'http://api.tvmaze.com/search/shows?q=',\n        images:[],\n    };\n\n    onTextChange = (e) => {\n        const val = e.target.value;\n        this.setState({[e.target.name]: val},() => {\n            if (val === ''){\n                this.setState({images:[]});\n            } else {\n                axios.get(`${this.state.apiUrl}${this.state.searchText}`\n                    )\n                    .then(res => this.setState({ images: res.data }))\n                    .catch(err => console.log(err));\n            }\n        });\n    };\n\n    onAmountChange = (e, index, value) => this.setState({amout:value});\n    render() {\n        return (\n            <div>\n                <TextField\n                    name = \"searchText\"\n                    value={this.state.searchText}\n                    onChange = {this.onTextChange}\n                    floatingLabelText=\"Search For Films\"\n                    fullWidth={true}\n                    textareaStyle={{alignItems:'center'}}\n                />\n            <br/>\n\n            {this.state.images.length > 0? (<ImageResults images={this.state.images} choosen={false}/>) : null}\n\n            </div>\n        )\n    }\n}\n\nexport default Search;\n","import React, { Component } from 'react';\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport Header from './components/header/Header';\nimport Footer from './components/footer/Footer';\nimport Search from './components/search/Search';\n\nclass App extends Component {\n  render() {\n    return (\n        <MuiThemeProvider >\n            <div>\n                <Header />\n                <Search />\n                <Footer />\n            < /div>\n        </MuiThemeProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}